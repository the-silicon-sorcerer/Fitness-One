generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Lifting_Goals {
    STRENGTH
    SIZE
}

enum Nutrition_Goals {
    CUTTING
    BULKING
    MAINTAIN
}

enum Experience {
    BEGINNER
    INTERMEDIATE
    ADVANCED
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    weight         Int?
    height         Int?
    weightGoal     Int?
    age            Int?
    gender         Gender?
    experience     Experience?
    lifing_goal    Lifting_Goals?
    nutrition_goal Nutrition_Goals?
    accounts       Account[]
    sessions       Session[]
    Workouts       Workout[]
    Fintess_Plan   Fintess_Plan[]
    Nutrition_Plan Nutrition_Plan[]
}

enum Status {
    COMPLETE
    UNFINSIHED
}

model Workout {
    id               String             @id @default(cuid())
    status           Status             @default(UNFINSIHED)
    date             DateTime
    user             User               @relation(fields: [userId], references: [id])
    userId           String
    Set              Set[]
    Workout_Settings Workout_Settings[]
}

model Workout_Settings {
    id            String  @id @default(cuid())
    rest_interval Int?
    workout       Workout @relation(fields: [workoutId], references: [id])
    workoutId     String
}

model Set {
    id        String  @id @default(cuid())
    reps      Int
    sets      Int
    Weight    Int
    workout   Workout @relation(fields: [workoutId], references: [id])
    workoutId String
    lift      Lift    @relation(fields: [liftId], references: [id])
    liftId    String
}

model Lift {
    id   String @id @default(cuid())
    name String
    Set  Set[]
}

enum Avalible_Splits {
    PPL
    ARNOLD
    BRO_SPLIT
    CUSTOM
}

model Fintess_Plan {
    id        String          @id @default(cuid())
    split     Avalible_Splits
    DPW       Int
    monday    String
    tuesday   String
    wednesday String
    thursday  String
    friday    String
    saturday  String
    sunday    String
    date      DateTime        @default(now())
    user      User            @relation(fields: [userId], references: [id])
    userId    String
}

model Nutrition_Plan {
    id       String   @id @default(cuid())
    calories Int
    protein  Int
    fat      Int
    carbs    Int
    water    Int
    date     DateTime @default(now())
    user     User     @relation(fields: [userId], references: [id])
    userId   String
}

model Meal {
    id       String   @id @default(cuid())
    servings Int
    date     DateTime @default(now())
    food     Food     @relation(fields: [foodId], references: [id])
    foodId   String
}

model Food {
    id   String @id @default(cuid())
    name String
    Meal Meal[]
}
